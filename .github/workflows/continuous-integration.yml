name: Build with CMake
# Based on https://github.com/sudara/pamplejuce

on: [push]

env:
  PROJECT_NAME: Speclet # Must match the JUCE project name from juce_add_plugin
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DISPLAY: :0 # linux pluginval needs this

# jobs are run in parallel on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest] # first test only with linux
        include:
        - os: ubuntu-latest
          artifact: Linux
        # first test only with linux
        #- os: windows-latest
        #  artifact: Windows
        #- os: macos-latest
        #  artifact: MacOS

    steps:
    - name: Install JUCE's Linux Dependencies and select g++ 10
      if: runner.os == 'Linux'
      # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
      run: |
        sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev ccache xvfb
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

    - name: Get latest CMake
      uses: lukka/get-cmake@latest      

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true # Gotta get JUCE populated

    - name: ccache
      if: matrix.os != 'windows-latest'
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ matrix.os }}-${{ matrix.type }}
  
    - name: Configure
      shell: bash
      run: cmake -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache .

    - name: Build
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ env.BUILD_DIR }}
      run: ctest
      
    - name: Pluginval Linux
      working-directory: ${{ env.BUILD_DIR }}
      if: matrix.artifact == 'Linux'
      run: |
        curl -L "https://github.com/Tracktion/pluginval/releases/download/v0.3.0/pluginval_${{ matrix.artifact }}.zip" -o pluginval.zip
        unzip pluginval
        # start xvfb in the background
        sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 &
        ./pluginval --strictness-level 10 --validate-in-process --verbose --output-dir "." --validate "${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3"
        
    - name: Pluginval Mac
      working-directory: ${{ env.BUILD_DIR }}
      if: matrix.artifact == 'MacOS'
      run: |
        curl -L "https://github.com/Tracktion/pluginval/releases/download/v0.3.0/pluginval_${{ matrix.artifact }}.zip" -o pluginval.zip
        unzip pluginval
        pluginval.app/Contents/MacOS/pluginval --strictness-level 10 --validate-in-process --verbose --output-dir "." --validate "${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3"

    - name: Pluginval Windows
      shell: cmd
      working-directory: ${{ env.BUILD_DIR }}
      if: matrix.artifact == 'Windows'
      run: |
        powershell -Command "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest https://github.com/Tracktion/pluginval/releases/download/v0.3.0/pluginval_Windows.zip -OutFile pluginval.zip"
        powershell -Command "Expand-Archive pluginval.zip -DestinationPath ."
        pluginval.exe --strictness-level 10 --validate-in-process --output-dir "./bin" --validate "${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3"
        if %ERRORLEVEL% neq 0 { exit /b 1 }

    - name: Zip
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake -E tar cfv ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip --format=zip ${{ env.PROJECT_NAME }}_artefacts

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip
        name: ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test
    outputs: 
        upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download All Artifacts
      uses: actions/download-artifact@v3
  
    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-Windows.zip
        asset_name: ${{ env.PROJECT_NAME }}-Windows.zip
        asset_content_type: application/zip

    - name: Upload Linux Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-Linux.zip
        asset_name: ${{ env.PROJECT_NAME }}-Linux.zip
        asset_content_type: application/zip

    - name: Upload MacOS Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-MacOS.zip
        asset_name: ${{ env.PROJECT_NAME }}-MacOS.zip
        asset_content_type: application/zip